{"version":3,"file":"react-hook-form-generator.cjs.production.min.js","sources":["../src/hooks/useStyles.ts","../src/hooks/useErrorMessage.ts","../src/components/TextField.tsx","../src/components/TextAreaField.tsx","../src/components/NumberField.tsx","../src/components/SwitchField.tsx","../src/components/CheckboxField.tsx","../src/components/SelectField.tsx","../src/components/Containers.tsx","../src/components/Form.tsx"],"sourcesContent":["import { useMemo, createContext, useContext } from 'react';\r\n\r\nimport { FormStyles, FieldStyles } from '../types';\r\n\r\nexport const StyleCtx = createContext({} as FormStyles);\r\n\r\nexport const useStyles = <T extends FieldStyles>(\r\n  type: keyof FormStyles,\r\n  inlineStyles?: T\r\n): T => {\r\n  const baseStyles = useContext(StyleCtx);\r\n\r\n  return useMemo(() => {\r\n    return !!inlineStyles\r\n      ? { ...baseStyles[type], ...inlineStyles }\r\n      : (baseStyles[type] as T);\r\n  }, [type, baseStyles, inlineStyles]);\r\n};\r\n","import { useMemo } from 'react';\r\nimport { useFormContext } from 'react-hook-form';\r\n\r\nexport const useErrorMessage = (name: string, label?: string) => {\r\n  const { errors } = useFormContext();\r\n\r\n  return useMemo(() => {\r\n    const error = errors[name];\r\n\r\n    if (!error) return undefined;\r\n\r\n    const message = error.message;\r\n\r\n    if (message) return message.replace(name, label || name);\r\n    return 'Field validation failed';\r\n  }, [errors, name, label]);\r\n};\r\n","import React, { FC, useMemo } from 'react';\r\nimport { useFormContext } from 'react-hook-form';\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  Input,\r\n  InputRightAddon,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n} from '@chakra-ui/react';\r\n\r\nimport { FieldProps, FieldStyles, TextFieldSchema } from '../types';\r\nimport { useErrorMessage } from '../hooks/useErrorMessage';\r\nimport { useStyles } from '../hooks/useStyles';\r\n\r\nexport const TextField: FC<FieldProps<TextFieldSchema>> = ({\r\n  id,\r\n  name,\r\n  field,\r\n  defaultValue,\r\n}) => {\r\n  const {\r\n    label,\r\n    placeholder,\r\n    htmlInputType,\r\n    helperText,\r\n    isRequired,\r\n    leftInputAddon,\r\n    rightInputAddon,\r\n    shouldDisplay,\r\n    styles = {},\r\n  } = field;\r\n\r\n  const fieldStyles = useStyles<FieldStyles>('textField', styles);\r\n\r\n  const { register, watch } = useFormContext();\r\n\r\n  const errorMessage = useErrorMessage(name, label);\r\n\r\n  const values = watch(name);\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      isRequired={isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...fieldStyles.control}\r\n    >\r\n      {!!label && (\r\n        <FormLabel htmlFor={name} {...fieldStyles.label}>\r\n          {label}\r\n        </FormLabel>\r\n      )}\r\n      {!!leftInputAddon || rightInputAddon ? (\r\n        <InputGroup {...fieldStyles.inputGroup}>\r\n          {!!leftInputAddon && <InputLeftAddon {...leftInputAddon} />}\r\n          <Input\r\n            data-testid={id}\r\n            type={htmlInputType || 'text'}\r\n            name={name}\r\n            aria-label={name}\r\n            ref={register()}\r\n            placeholder={placeholder}\r\n            defaultValue={defaultValue || ''}\r\n            {...fieldStyles.input}\r\n          />\r\n          {!!rightInputAddon && <InputRightAddon {...rightInputAddon} />}\r\n        </InputGroup>\r\n      ) : (\r\n        <Input\r\n          data-testid={id}\r\n          type={htmlInputType || 'text'}\r\n          name={name}\r\n          aria-label={name}\r\n          ref={register()}\r\n          placeholder={placeholder}\r\n          defaultValue={defaultValue || ''}\r\n          {...fieldStyles.input}\r\n        />\r\n      )}\r\n      {!!helperText && (\r\n        <FormHelperText {...fieldStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...fieldStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n","import React, { FC, useMemo } from 'react';\r\nimport { useFormContext } from 'react-hook-form';\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n  Textarea,\r\n  FormHelperText,\r\n} from '@chakra-ui/react';\r\n\r\nimport { FieldProps, FieldStyles, TextAreaFieldSchema } from '../types';\r\nimport { useErrorMessage } from '../hooks/useErrorMessage';\r\nimport { useStyles } from '../hooks/useStyles';\r\n\r\nexport const TextAreaField: FC<FieldProps<TextAreaFieldSchema>> = ({\r\n  id,\r\n  name,\r\n  field,\r\n  defaultValue,\r\n}) => {\r\n  const {\r\n    label,\r\n    placeholder,\r\n    helperText,\r\n    isRequired,\r\n    shouldDisplay,\r\n    styles = {},\r\n  } = field;\r\n\r\n  const fieldStyles = useStyles<FieldStyles>('textAreaField', styles);\r\n\r\n  const { register, watch } = useFormContext();\r\n\r\n  const errorMessage = useErrorMessage(name, label);\r\n\r\n  const values = watch(name);\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      isRequired={isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...fieldStyles.control}\r\n    >\r\n      {!!label && (\r\n        <FormLabel htmlFor={name} {...fieldStyles.label}>\r\n          {label}\r\n        </FormLabel>\r\n      )}\r\n      <Textarea\r\n        data-testid={id}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        ref={register()}\r\n        defaultValue={defaultValue || ''}\r\n        {...fieldStyles.input}\r\n      />\r\n      {!!helperText && (\r\n        <FormHelperText {...fieldStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...fieldStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n","import React, { FC, useMemo } from 'react';\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n  FormErrorMessage,\r\n} from '@chakra-ui/react';\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\n\r\nimport { FieldProps, FieldStyles, NumberFieldSchema } from '../types';\r\nimport { useErrorMessage } from '../hooks/useErrorMessage';\r\nimport { useStyles } from '../hooks/useStyles';\r\n\r\nexport const NumberField: FC<FieldProps<NumberFieldSchema>> = ({\r\n  id,\r\n  name,\r\n  field,\r\n  defaultValue,\r\n}) => {\r\n  const {\r\n    label,\r\n    placeholder,\r\n    helperText,\r\n    isRequired,\r\n    shouldDisplay,\r\n    styles = {},\r\n  } = field;\r\n\r\n  const fieldStyles = useStyles<FieldStyles>('numberField', styles);\r\n\r\n  const { control, watch } = useFormContext();\r\n\r\n  const values = watch(name);\r\n\r\n  const errorMessage = useErrorMessage(name, label);\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      key={`${name}-control`}\r\n      isRequired={isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...fieldStyles.control}\r\n    >\r\n      {!!label && (\r\n        <FormLabel htmlFor={name} {...fieldStyles.errorMessage}>\r\n          {label}\r\n        </FormLabel>\r\n      )}\r\n      <Controller\r\n        name={name}\r\n        control={control}\r\n        defaultValue={defaultValue || 0}\r\n        as={\r\n          <NumberInput>\r\n            <NumberInputField\r\n              id={id}\r\n              data-testid={id}\r\n              placeholder={placeholder}\r\n              {...fieldStyles.input}\r\n            />\r\n            <NumberInputStepper>\r\n              <NumberIncrementStepper />\r\n              <NumberDecrementStepper />\r\n            </NumberInputStepper>\r\n          </NumberInput>\r\n        }\r\n      />\r\n      {!!helperText && (\r\n        <FormHelperText {...fieldStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...fieldStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n","import React, { FC, useMemo } from 'react';\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Switch,\r\n} from '@chakra-ui/react';\r\nimport { useFormContext } from 'react-hook-form';\r\n\r\nimport { FieldProps, SwitchFieldStyles, SwitchFieldSchema } from '../types';\r\nimport { useErrorMessage } from '../hooks/useErrorMessage';\r\nimport { useStyles } from '../hooks/useStyles';\r\n\r\nexport const SwitchField: FC<FieldProps<SwitchFieldSchema>> = ({\r\n  id,\r\n  name,\r\n  field,\r\n}) => {\r\n  const { label, helperText, isRequired, shouldDisplay, styles = {} } = field;\r\n\r\n  const { register, watch } = useFormContext();\r\n\r\n  const values = watch(name);\r\n\r\n  const fieldStyles = useStyles<SwitchFieldStyles>('switchField', styles);\r\n\r\n  const errorMessage = useErrorMessage(name, label);\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      key={`${name}-control`}\r\n      isRequired={isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...fieldStyles.control}\r\n    >\r\n      {!!label && (\r\n        <FormLabel htmlFor={name} {...fieldStyles.label}>\r\n          {label}\r\n        </FormLabel>\r\n      )}\r\n      <Switch\r\n        name={name}\r\n        data-testid={id}\r\n        ref={register}\r\n        {...fieldStyles.switch}\r\n      />\r\n      {!!helperText && (\r\n        <FormHelperText {...fieldStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...fieldStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n","import React, { FC, useMemo } from 'react';\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Checkbox,\r\n  Stack,\r\n} from '@chakra-ui/react';\r\nimport { useFormContext } from 'react-hook-form';\r\n\r\nimport { FieldProps, CheckboxFieldSchema, CheckboxFieldStyles } from '../types';\r\nimport { useErrorMessage } from '../hooks/useErrorMessage';\r\nimport { useStyles } from '../hooks/useStyles';\r\n\r\nexport const checkboxFieldStyles: CheckboxFieldStyles = {\r\n  checkboxGroup: {\r\n    isInline: true,\r\n    spacing: 4,\r\n  },\r\n};\r\n\r\nexport const CheckboxField: FC<FieldProps<CheckboxFieldSchema>> = ({\r\n  id,\r\n  name,\r\n  field,\r\n}) => {\r\n  const { label, helperText, isRequired, shouldDisplay, styles = {} } = field;\r\n\r\n  const { register, watch } = useFormContext();\r\n\r\n  const values = watch(name);\r\n\r\n  const fieldStyles = useStyles<CheckboxFieldStyles>('checkboxField', styles);\r\n\r\n  const errorMessage = useErrorMessage(name, label);\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      key={`${name}-control`}\r\n      isRequired={isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...fieldStyles.control}\r\n    >\r\n      {!!label && (\r\n        <FormLabel htmlFor={name} {...fieldStyles.label}>\r\n          {label}\r\n        </FormLabel>\r\n      )}\r\n      <Stack {...fieldStyles.checkboxGroup}>\r\n        {field.checkboxes.map(checkbox => (\r\n          <Checkbox\r\n            key={checkbox.name}\r\n            name={checkbox.name}\r\n            ref={register}\r\n            data-testid={`${id}-${checkbox.name}`}\r\n          >\r\n            {checkbox.label || checkbox.name}\r\n          </Checkbox>\r\n        ))}\r\n      </Stack>\r\n      {!!helperText && (\r\n        <FormHelperText {...fieldStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...fieldStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n","import React, { FC, useMemo } from 'react';\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n  Select,\r\n} from '@chakra-ui/react';\r\nimport { useFormContext } from 'react-hook-form';\r\n\r\nimport { FieldProps, SelectFieldSchema, SelectFieldStyles } from '../types';\r\nimport { useErrorMessage } from '../hooks/useErrorMessage';\r\nimport { useStyles } from '../hooks/useStyles';\r\n\r\nexport const SelectField: FC<FieldProps<SelectFieldSchema>> = ({\r\n  id,\r\n  name,\r\n  field,\r\n  defaultValue,\r\n}) => {\r\n  const { label, helperText, isRequired, shouldDisplay, styles = {} } = field;\r\n\r\n  const { register, watch } = useFormContext();\r\n\r\n  const values = watch(name);\r\n\r\n  const fieldStyles = useStyles<SelectFieldStyles>('selectField', styles);\r\n\r\n  const errorMessage = useErrorMessage(name, label);\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      key={`${name}-control`}\r\n      isRequired={isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...fieldStyles.control}\r\n    >\r\n      {!!label && (\r\n        <FormLabel htmlFor={name} {...fieldStyles.label}>\r\n          {label}\r\n        </FormLabel>\r\n      )}\r\n      <Select\r\n        name={name}\r\n        data-testid={id}\r\n        ref={register()}\r\n        defaultValue={defaultValue || field.options[0].value}\r\n        {...fieldStyles.select}\r\n      >\r\n        {field.options.map(option => (\r\n          <option key={option.value} value={option.value}>\r\n            {option.label || option.value}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n      {!!helperText && (\r\n        <FormHelperText {...fieldStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...fieldStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n","import React, { FC, useMemo } from 'react';\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  ButtonGroup,\r\n  IconButton,\r\n  Flex,\r\n  Collapse,\r\n  useDisclosure,\r\n  Box,\r\n  Stack,\r\n  FormHelperText,\r\n  FormErrorMessage,\r\n} from '@chakra-ui/react';\r\nimport { useFormContext, useFieldArray } from 'react-hook-form';\r\n\r\nimport {\r\n  FieldProps,\r\n  ArrayFieldStyles,\r\n  ArrayFieldSchema,\r\n  Field,\r\n  ObjectFieldStyles,\r\n  ObjectFieldSchema,\r\n} from '../types';\r\nimport { useErrorMessage } from '../hooks/useErrorMessage';\r\nimport { useStyles } from '../hooks/useStyles';\r\nimport { TextField } from './TextField';\r\nimport { NumberField } from './NumberField';\r\nimport { SwitchField } from './SwitchField';\r\nimport { CheckboxField } from './CheckboxField';\r\nimport { SelectField } from './SelectField';\r\nimport { TextAreaField } from './TextAreaField';\r\nimport { AddIcon, DeleteIcon, ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\r\n\r\nconst renderField = (\r\n  [name, field]: [string, Field],\r\n  id?: string,\r\n  defaultValue?: any\r\n) => {\r\n  let Component: any = null;\r\n\r\n  switch (field.type) {\r\n    case 'text':\r\n      Component = TextField;\r\n      break;\r\n\r\n    case 'textArea':\r\n      Component = TextAreaField;\r\n      break;\r\n\r\n    case 'number':\r\n      Component = NumberField;\r\n      break;\r\n\r\n    case 'array':\r\n      Component = ArrayField;\r\n      break;\r\n\r\n    case 'object':\r\n      Component = ObjectField;\r\n      break;\r\n\r\n    case 'switch':\r\n      Component = SwitchField;\r\n      break;\r\n\r\n    case 'checkbox':\r\n      Component = CheckboxField;\r\n      break;\r\n\r\n    case 'select':\r\n      Component = SelectField;\r\n      break;\r\n\r\n    case 'custom':\r\n      Component = field.component;\r\n      return (\r\n        <Box>\r\n          <Component\r\n            id={id}\r\n            data-testid={id}\r\n            name={name}\r\n            field={field}\r\n            defaultValue={defaultValue}\r\n            {...field.props}\r\n          />\r\n        </Box>\r\n      );\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Component\r\n        id={id}\r\n        data-testid={id}\r\n        name={name}\r\n        field={field}\r\n        defaultValue={defaultValue}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const arrayFieldStyles: ArrayFieldStyles = {\r\n  arrayContainer: {\r\n    spacing: 4,\r\n    marginTop: 2,\r\n  },\r\n  label: {\r\n    padding: 0,\r\n    display: 'flex',\r\n  },\r\n  countText: {\r\n    fontWeight: 400,\r\n    marginLeft: 1,\r\n  },\r\n  toolbar: {\r\n    alignItems: 'center',\r\n  },\r\n  buttonGroup: {\r\n    marginLeft: 'auto',\r\n  },\r\n  addButton: {\r\n    size: 'xs',\r\n  },\r\n  deleteButton: {\r\n    size: 'xs',\r\n    margin: 'auto',\r\n  },\r\n  clearButton: {\r\n    size: 'xs',\r\n  },\r\n  collapseButton: {\r\n    size: 'xs',\r\n  },\r\n  itemContainer: {\r\n    display: 'grid',\r\n    gridTemplateColumns: '1fr 2.5rem',\r\n    paddingLeft: 2,\r\n    paddingBottom: 2,\r\n    paddingTop: 1,\r\n    border: '1px solid',\r\n    borderRadius: 4,\r\n    borderColor: 'gray.200',\r\n    backgroundColor: 'gray.50',\r\n  },\r\n  deleteItemContainer: {\r\n    display: 'flex',\r\n  },\r\n};\r\n\r\nexport const ArrayField: FC<FieldProps<ArrayFieldSchema>> = ({\r\n  name,\r\n  field,\r\n}) => {\r\n  const {\r\n    label,\r\n    isRequired,\r\n    isCollapsable,\r\n    itemField,\r\n    helperText,\r\n    shouldDisplay,\r\n    styles = {},\r\n  } = field;\r\n\r\n  const { control, watch } = useFormContext();\r\n\r\n  const values = watch(name);\r\n\r\n  const { fields, append, remove } = useFieldArray({ name, control });\r\n\r\n  const { isOpen, onOpen, onToggle } = useDisclosure({ defaultIsOpen: true });\r\n\r\n  const arrayStyles = useStyles<ArrayFieldStyles>('arrayField', styles);\r\n\r\n  const errorMessage = useErrorMessage(name, label);\r\n\r\n  const addItem = () => {\r\n    append({});\r\n    onOpen();\r\n  };\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      isRequired={isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...arrayStyles.control}\r\n    >\r\n      <Flex {...arrayStyles.toolbar}>\r\n        {!!label && (\r\n          <FormLabel htmlFor={name} {...arrayStyles.label}>\r\n            {label} <Box {...arrayStyles.countText}>({fields.length})</Box>\r\n          </FormLabel>\r\n        )}\r\n        <ButtonGroup {...arrayStyles.buttonGroup}>\r\n          <IconButton\r\n            icon={<AddIcon />}\r\n            aria-label=\"Add item\"\r\n            onClick={addItem}\r\n            {...arrayStyles.addButton}\r\n          />\r\n          <IconButton\r\n            icon={<DeleteIcon />}\r\n            aria-label=\"Clear items\"\r\n            onClick={() => remove()}\r\n            {...arrayStyles.clearButton}\r\n          />\r\n          {isCollapsable && (\r\n            <IconButton\r\n              as={isOpen ? ViewOffIcon : ViewIcon}\r\n              aria-label={isOpen ? 'Hide items' : 'Show items'}\r\n              onClick={onToggle}\r\n              {...arrayStyles.collapseButton}\r\n            />\r\n          )}\r\n        </ButtonGroup>\r\n      </Flex>\r\n      <Collapse isOpen={isOpen}>\r\n        <Stack {...arrayStyles.arrayContainer}>\r\n          {fields.map((item, i) => (\r\n            <Box\r\n              key={item?.id || `${name}[${i}].value`}\r\n              {...arrayStyles.itemContainer}\r\n            >\r\n              {renderField(\r\n                [`${name}[${i}].value`, itemField],\r\n                item.id,\r\n                item.value\r\n              )}\r\n              <Box {...arrayStyles.deleteItemContainer}>\r\n                <IconButton\r\n                  icon={<DeleteIcon />}\r\n                  aria-label=\"Delete item\"\r\n                  onClick={() => remove(i)}\r\n                  {...arrayStyles.deleteButton}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          ))}\r\n        </Stack>\r\n      </Collapse>\r\n      {!!helperText && (\r\n        <FormHelperText {...arrayStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...arrayStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n\r\nexport const objectFieldStyles: ObjectFieldStyles = {\r\n  objectContainer: {\r\n    spacing: 4,\r\n    borderWidth: 1,\r\n    borderColor: 'gray.200',\r\n    padding: 2,\r\n    borderRadius: 4,\r\n    marginTop: 2,\r\n    backgroundColor: 'gray.50',\r\n  },\r\n  label: {\r\n    padding: 0,\r\n  },\r\n  toolbar: {\r\n    alignItems: 'center',\r\n  },\r\n  collapseButton: {\r\n    size: 'xs',\r\n    marginLeft: 'auto',\r\n  },\r\n};\r\n\r\nexport const ObjectField: FC<FieldProps<ObjectFieldSchema>> = ({\r\n  name,\r\n  field,\r\n  id,\r\n  defaultValue,\r\n}) => {\r\n  const {\r\n    label,\r\n    isCollapsable,\r\n    isRequired,\r\n    helperText,\r\n    shouldDisplay,\r\n    styles = {},\r\n  } = field;\r\n\r\n  const { watch } = useFormContext();\r\n\r\n  const values = watch(name);\r\n\r\n  const { isOpen, onToggle } = useDisclosure({ defaultIsOpen: true });\r\n\r\n  const objectStyles = useStyles<ObjectFieldStyles>('objectField', styles);\r\n\r\n  const errorMessage = useErrorMessage(name, field.label);\r\n\r\n  const isVisible = useMemo(() => {\r\n    return shouldDisplay ? shouldDisplay(values) : true;\r\n  }, [values, shouldDisplay]);\r\n\r\n  return isVisible ? (\r\n    <FormControl\r\n      isRequired={!!isRequired}\r\n      isInvalid={!!errorMessage}\r\n      {...objectStyles.control}\r\n    >\r\n      <Flex {...objectStyles.toolbar}>\r\n        {!!label && (\r\n          <FormLabel htmlFor={name} {...objectStyles.label}>\r\n            {label}\r\n          </FormLabel>\r\n        )}\r\n        {isCollapsable && (\r\n          <IconButton\r\n            as={isOpen ? ViewOffIcon : ViewIcon}\r\n            aria-label={isOpen ? 'Hide items' : 'Show items'}\r\n            onClick={onToggle}\r\n            {...objectStyles.collapseButton}\r\n          />\r\n        )}\r\n      </Flex>\r\n      <Collapse isOpen={isOpen}>\r\n        <Stack {...objectStyles.objectContainer}>\r\n          {Object.entries(field.properties).map(\r\n            ([fieldName, objectField], i) => (\r\n              <Box key={i} {...objectStyles.propertyContainer}>\r\n                {renderField(\r\n                  [`${name}.${fieldName}`, objectField],\r\n                  id,\r\n                  defaultValue?.[fieldName]\r\n                )}\r\n              </Box>\r\n            )\r\n          )}\r\n        </Stack>\r\n      </Collapse>\r\n      {!!helperText && (\r\n        <FormHelperText {...objectStyles.helperText}>\r\n          {helperText}\r\n        </FormHelperText>\r\n      )}\r\n      <FormErrorMessage {...objectStyles.errorMessage}>\r\n        {errorMessage}\r\n      </FormErrorMessage>\r\n    </FormControl>\r\n  ) : null;\r\n};\r\n","import React, { FC, BaseSyntheticEvent, useMemo } from 'react';\r\nimport { Box, Heading, Stack, ButtonGroup, Button } from '@chakra-ui/react';\r\nimport { useForm, FormProvider, UseFormOptions } from 'react-hook-form';\r\nimport merge from 'lodash.merge';\r\n\r\nimport { FormStyles, Field, Schema } from '../types';\r\nimport { StyleCtx } from '../hooks/useStyles';\r\nimport { TextField } from './TextField';\r\nimport { TextAreaField } from './TextAreaField';\r\nimport { NumberField } from './NumberField';\r\nimport {\r\n  ArrayField,\r\n  arrayFieldStyles,\r\n  ObjectField,\r\n  objectFieldStyles,\r\n} from './Containers';\r\nimport { SwitchField } from './SwitchField';\r\nimport { CheckboxField, checkboxFieldStyles } from './CheckboxField';\r\nimport { SelectField } from './SelectField';\r\n\r\nexport interface FormProps {\r\n  title?: string;\r\n  schema: Schema;\r\n  handleSubmit: (values: any, e?: BaseSyntheticEvent) => void;\r\n  styles?: FormStyles;\r\n  overwriteDefaultStyles?: boolean;\r\n  formOptions?: UseFormOptions;\r\n  buttons?: {\r\n    reset?: {\r\n      text?: string;\r\n      hidden?: boolean;\r\n    };\r\n    submit?: {\r\n      text?: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst defaultStyles: FormStyles = {\r\n  form: {\r\n    container: {\r\n      padding: 4,\r\n    },\r\n    title: {\r\n      size: 'lg',\r\n      marginBottom: 4,\r\n    },\r\n    fieldSpacing: 6,\r\n    buttonGroup: {\r\n      marginTop: 4,\r\n    },\r\n    submitButton: {\r\n      size: 'sm',\r\n    },\r\n    resetButton: {\r\n      size: 'sm',\r\n    },\r\n  },\r\n  arrayField: arrayFieldStyles,\r\n  objectField: objectFieldStyles,\r\n  checkboxField: checkboxFieldStyles,\r\n};\r\n\r\nconst renderField = ([name, field]: [string, Field]) => {\r\n  let Component: any = null;\r\n\r\n  switch (field.type) {\r\n    case 'text':\r\n      Component = TextField;\r\n      break;\r\n\r\n    case 'textArea':\r\n      Component = TextAreaField;\r\n      break;\r\n\r\n    case 'number':\r\n      Component = NumberField;\r\n      break;\r\n\r\n    case 'array':\r\n      Component = ArrayField;\r\n      break;\r\n\r\n    case 'object':\r\n      Component = ObjectField;\r\n      break;\r\n\r\n    case 'switch':\r\n      Component = SwitchField;\r\n      break;\r\n\r\n    case 'checkbox':\r\n      Component = CheckboxField;\r\n      break;\r\n\r\n    case 'select':\r\n      Component = SelectField;\r\n      break;\r\n\r\n    case 'custom':\r\n      Component = field.component;\r\n      return (\r\n        <Box key={`${name}-container`}>\r\n          <Component name={name} field={field} {...field.props} />\r\n        </Box>\r\n      );\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Box key={`${name}-container`}>\r\n      <Component name={name} field={field} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const Form: FC<FormProps> = ({\r\n  title,\r\n  schema,\r\n  handleSubmit,\r\n  formOptions,\r\n  overwriteDefaultStyles,\r\n  buttons,\r\n  styles = {},\r\n}) => {\r\n  const form = useForm(formOptions);\r\n\r\n  const baseStyles = useMemo(() => {\r\n    return overwriteDefaultStyles ? styles : merge(defaultStyles, styles);\r\n  }, [styles, overwriteDefaultStyles]);\r\n\r\n  return (\r\n    <StyleCtx.Provider value={baseStyles}>\r\n      <FormProvider {...form}>\r\n        <Box\r\n          as=\"form\"\r\n          onSubmit={form.handleSubmit(handleSubmit)}\r\n          {...baseStyles.form?.container}\r\n        >\r\n          {!!title && <Heading {...baseStyles.form?.title}>{title}</Heading>}\r\n          <Stack spacing={baseStyles.form?.fieldSpacing}>\r\n            {Object.entries(schema).map(renderField)}\r\n          </Stack>\r\n          <ButtonGroup {...baseStyles.form?.buttonGroup}>\r\n            {buttons?.reset?.hidden ? null : (\r\n              <Button type=\"reset\" {...baseStyles.form?.resetButton}>\r\n                {buttons?.reset?.text || 'Reset'}\r\n              </Button>\r\n            )}\r\n            <Button type=\"submit\" {...baseStyles.form?.submitButton}>\r\n              {buttons?.submit?.text || 'Submit'}\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Box>\r\n      </FormProvider>\r\n    </StyleCtx.Provider>\r\n  );\r\n};\r\n"],"names":["StyleCtx","createContext","useStyles","type","inlineStyles","baseStyles","useContext","useMemo","useErrorMessage","name","label","errors","useFormContext","error","message","replace","TextField","id","field","defaultValue","placeholder","htmlInputType","helperText","isRequired","leftInputAddon","rightInputAddon","shouldDisplay","styles","fieldStyles","register","watch","errorMessage","values","React","FormControl","isInvalid","control","FormLabel","htmlFor","InputGroup","inputGroup","InputLeftAddon","Input","ref","input","InputRightAddon","FormHelperText","FormErrorMessage","TextAreaField","Textarea","NumberField","key","Controller","as","NumberInput","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","SwitchField","Switch","CheckboxField","Stack","checkboxGroup","checkboxes","map","checkbox","Checkbox","SelectField","Select","options","value","select","option","renderField","Component","ArrayField","ObjectField","Box","component","props","isCollapsable","itemField","useFieldArray","fields","append","remove","useDisclosure","defaultIsOpen","isOpen","onOpen","onToggle","arrayStyles","Flex","toolbar","countText","length","ButtonGroup","buttonGroup","IconButton","icon","AddIcon","onClick","addButton","DeleteIcon","clearButton","ViewOffIcon","ViewIcon","collapseButton","Collapse","arrayContainer","item","i","itemContainer","deleteItemContainer","deleteButton","objectStyles","objectContainer","Object","entries","properties","fieldName","objectField","propertyContainer","defaultStyles","form","container","padding","title","size","marginBottom","fieldSpacing","marginTop","submitButton","resetButton","arrayField","spacing","display","fontWeight","marginLeft","alignItems","margin","gridTemplateColumns","paddingLeft","paddingBottom","paddingTop","border","borderRadius","borderColor","backgroundColor","borderWidth","checkboxField","isInline","schema","handleSubmit","overwriteDefaultStyles","buttons","useForm","formOptions","merge","Provider","FormProvider","onSubmit","_baseStyles$form","Heading","_baseStyles$form2","_baseStyles$form3","_baseStyles$form4","reset","hidden","Button","_baseStyles$form5","text","_baseStyles$form6","submit"],"mappings":"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"}